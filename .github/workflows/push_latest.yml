name: Build and push micromamba docker image

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'

env:
  DEFAULT_BASE_IMAGE: 'debian:bullseye-slim'

jobs:
  build_docker_image_and_push:
    if: github.repository == 'mamba-org/micromamba-docker'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
         - debian:bullseye-slim
         - debian:bullseye
         - debian:buster-slim
         - debian:buster
         - ubuntu:jammy
         - ubuntu:impish
         - ubuntu:focal
         - ubuntu:bionic
         - nvidia/cuda:11.7.0-base-ubuntu22.04
         - nvidia/cuda:11.7.0-base-ubuntu20.04
    steps:
    - name: Install GNU parallel
      run: sudo apt-get install --no-install-recommends -y parallel
    - name: Setup nox
      uses: excitedleigh/setup-nox@4c62aee44396909396d10137c747b2633deeee76
    - name: Checkout source
      uses: actions/checkout@230611dbd0eb52da1e1f4f7bc8bb0c3a339fc8b7
      with:
        submodules: recursive
    - name: Get short git hash
      id: short_hash
      run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
    - name: Get micromamba version
      id: get_version
      run: echo "::set-output name=version::$(grep '^ARG VERSION=' Dockerfile  | cut -d= -f2)"
    - name: Set image variables
      id: set_image_variables
      env:
        IMAGE: ${{ matrix.image }}
      run: |
        if [ "${IMAGE%%:*}" = "nvidia/cuda" ]; then
          declare -A code_name
          code_name[22.04]=jammy
          code_name[20.04]=focal
          code_name[18.04]=bionic
          ubuntu_version_number="${IMAGE##*-ubuntu}"
          tag="${IMAGE##*:}"
          cuda_version="${tag%%-*}"
          echo "::set-output name=tag::${code_name[$ubuntu_version_number]}-cuda-${cuda_version}"
          echo "::set-output name=platforms::linux/amd64,linux/arm64"
        else
          echo "::set-output name=tag::$(echo "$IMAGE" | cut -d: -f2)"
          echo "::set-output name=platforms::linux/amd64,linux/arm64,linux/ppc64le"
        fi
        echo "::set-output name=is_default::$([ "$IMAGE" = "$DEFAULT_BASE_IMAGE" ] && echo true || echo false)"
    - name: Get docker metadata
      id: get_metadata
      uses: docker/metadata-action@8d56fe93cf3fd680736a906389438c1ed74d75f7
      with:
        images: mambaorg/micromamba
        flavor: latest=false
        # latest
        # base_image
        # major.minor.patch
        # major.minor
        # major
        # major.minor.patch-base_image
        # major.minor-base_image
        # major-base_image
        # git-commit-base_image
        # git-commit 
        tags: |
            type=raw,value=latest,priority=1000,enable=${{ steps.set_image_variables.outputs.is_default }}
            type=raw,value=${{ steps.set_image_variables.outputs.tag }},priority=900
            type=semver,pattern={{version}},enable=${{ steps.set_image_variables.outputs.is_default }},value=${{ steps.get_version.outputs.version }},priority=800
            type=semver,pattern={{major}}.{{minor}},enable=${{ steps.set_image_variables.outputs.is_default }},value=${{ steps.get_version.outputs.version }},priority=700
            type=semver,pattern={{major}},enable=${{ steps.set_image_variables.outputs.is_default }},value=${{ steps.get_version.outputs.version }},priority=600
            type=semver,pattern={{version}}-${{ steps.set_image_variables.outputs.tag }},value=${{ steps.get_version.outputs.version }},priority=500
            type=semver,pattern={{major}}.{{minor}}-${{ steps.set_image_variables.outputs.tag}},value=${{ steps.get_version.outputs.version }},priority=400
            type=semver,pattern={{major}}-${{ steps.set_image_variables.outputs.tag}},value=${{ steps.get_version.outputs.version }},priority=300
            type=sha,prefix=git-,suffix=-${{ steps.set_image_variables.outputs.tag }},priority=200
            type=sha,prefix=git-,enable=${{ steps.set_image_variables.outputs.is_default }},priority=100
    - name: Setup docker buildx
      uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf
    - name: Login to DockerHub
      uses: docker/login-action@17f28ab24d0d2832d5ff23a1409bbfc373ebcb96
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build Docker images
      id: docker_build
      uses: docker/build-push-action@fe02965b4878556fce19e4f0aa608d7d09ed629b
      with:
        platforms: ${{ steps.set_image_variables.outputs.platforms }}
        push: false
        build-args: |
          BASE_IMAGE=${{ matrix.image }}
        tags: ${{ steps.get_metadata.outputs.tags }}
        labels: ${{ steps.get_metadata.outputs.labels}}
        cache-from: type=registry,ref=mambaorg/micromamba:latest
        cache-to: type=inline
    - name: Run tests
      env:
        IMAGE: ${{ matrix.image }}
      run: nox -s "tests(base_image='${IMAGE}')"
    - name: Push Docker images
      id: docker_push
      uses: docker/build-push-action@fe02965b4878556fce19e4f0aa608d7d09ed629b
      with:
        platforms: ${{ steps.set_image_variables.outputs.platforms }}
        push: true
        build-args: |
          BASE_IMAGE=${{ matrix.image }}
        tags: ${{ steps.get_metadata.outputs.tags }}
        labels: ${{ steps.get_metadata.outputs.labels}}
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
